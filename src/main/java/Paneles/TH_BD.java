package Paneles;


import DAO.UsuarioDAO;
import java.awt.Container;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import modelo.Usuario;
import metodos_distribuidos.TablaHashBD;

public class TH_BD extends javax.swing.JPanel {
        private TablaHashBD tablaHashBD; // Instancia de TablaHashBD
        private UsuarioDAO usuarioDAO; // Instancia de UsuarioDAO
 
    public TH_BD(int capacidad) {
        initComponents();
        tablaHashBD = new TablaHashBD(capacidad); // Inicializar instancia de TablaHashBD con la capacidad especificada
        usuarioDAO = new UsuarioDAO(); // Inicializar instancia de UsuarioDAO
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtLogin = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        btnInsertar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        btnFuncionHash = new javax.swing.JButton();
        btnAritmetico = new javax.swing.JButton();
        btnPlegamiento = new javax.swing.JButton();
        btnMitadCuadrado = new javax.swing.JButton();
        btnMultiplicacion = new javax.swing.JButton();
        btnLimpiarTabla = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 204, 255));

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));

        jLabel2.setText("Nombre");

        jLabel3.setText("Login");

        jLabel4.setText("Correo");

        jLabel5.setText("Password");

        btnInsertar.setText("Insertar Usuario");
        btnInsertar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "ID", "Usuario", "Login"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        btnFuncionHash.setText("Funcion Hash");
        btnFuncionHash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFuncionHashActionPerformed(evt);
            }
        });

        btnAritmetico.setText("Aritmetica Modular");
        btnAritmetico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAritmeticoActionPerformed(evt);
            }
        });

        btnPlegamiento.setText("Plegamiento");
        btnPlegamiento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlegamientoActionPerformed(evt);
            }
        });

        btnMitadCuadrado.setText("Mitad Cuadrado");
        btnMitadCuadrado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMitadCuadradoActionPerformed(evt);
            }
        });

        btnMultiplicacion.setText("Multiplicacion");
        btnMultiplicacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMultiplicacionActionPerformed(evt);
            }
        });

        btnLimpiarTabla.setText("Limpiar Tabla");
        btnLimpiarTabla.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTablaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMitadCuadrado, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnMultiplicacion, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(71, 71, 71)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnInsertar, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(txtPassword)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGap(3, 3, 3)
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtLogin, javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(txtNombre)
                                                .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(51, 51, 51)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnAritmetico)
                                    .addComponent(btnPlegamiento, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnFuncionHash, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 120, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiarTabla)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 430, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtLogin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(19, 19, 19)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addComponent(btnInsertar)
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnMitadCuadrado)
                        .addGap(41, 41, 41)
                        .addComponent(btnMultiplicacion)
                        .addGap(120, 120, 120))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnFuncionHash)
                        .addGap(26, 26, 26)
                        .addComponent(btnAritmetico)
                        .addGap(31, 31, 31)
                        .addComponent(btnPlegamiento)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnLimpiarTabla)
                .addGap(25, 25, 25))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarActionPerformed
        // Obtén los datos ingresados en los campos de texto
        String nombre = txtNombre.getText();
        String login = txtLogin.getText();
        String correo = txtCorreo.getText();
        String password = txtPassword.getText(); // Obtener la contraseña desde el nuevo campo de texto

        // Crea un nuevo objeto Usuario con los datos ingresados
        Usuario nuevoUsuario = new Usuario();
        nuevoUsuario.setNombreCompleto(nombre);
        nuevoUsuario.setLogin(login);
        nuevoUsuario.setPassword(password); // Establecer la contraseña
        nuevoUsuario.setCorreo(correo);

        // Llama al método insertar de UsuarioDAO para agregar el nuevo usuario a la base de datos
        usuarioDAO.insertar(nuevoUsuario);

        // Limpia los campos de texto después de agregar el usuario

        txtNombre.setText("");
        txtLogin.setText("");
        txtCorreo.setText("");
        txtPassword.setText(""); // Limpiar el campo de contraseña
    }//GEN-LAST:event_btnInsertarActionPerformed

    private void btnFuncionHashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFuncionHashActionPerformed

        // Obtener la lista de usuarios
        List<Usuario> usuarios = tablaHashBD.obtenerUsuariosOrdenados("funcionHash");

        // Obtener el rango de índices permitidos
        int minIndex = Integer.MAX_VALUE;
        int maxIndex = Integer.MIN_VALUE;
        Map<Integer, List<Usuario>> indexMap = new HashMap<>();
        for (Usuario usuario : usuarios) {
            int newIndex = tablaHashBD.funcionHash(usuario.getLogin());
            if (newIndex < minIndex) {
                minIndex = newIndex;
            }
            if (newIndex > maxIndex) {
                maxIndex = newIndex;
            }
            // Agregar el usuario al índice correspondiente en el mapa
            indexMap.computeIfAbsent(newIndex, k -> new ArrayList<>()).add(usuario);
        }

        // Llenar la tabla con los usuarios
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < 100; i++) {
            List<Usuario> usuariosAtIndex = indexMap.getOrDefault(i, new ArrayList<>());
            for (Usuario usuario : usuariosAtIndex) {
                model.addRow(new Object[]{i, usuario.getNombreCompleto(), usuario.getLogin()});
            }
            if (usuariosAtIndex.isEmpty()) {
                model.addRow(new Object[]{i, "", ""}); // Agregar una fila vacía si no hay usuarios en este índice
            }
        }

    }//GEN-LAST:event_btnFuncionHashActionPerformed

    private void btnAritmeticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAritmeticoActionPerformed

        // Obtener la lista de usuarios
        List<Usuario> usuarios = tablaHashBD.obtenerUsuariosOrdenados("aritmeticaModular");

        // Obtener el rango de índices permitidos
        int minIndex = Integer.MAX_VALUE;
        int maxIndex = Integer.MIN_VALUE;
        Map<Integer, List<Usuario>> indexMap = new HashMap<>();
        for (Usuario usuario : usuarios) {
            int newIndex = tablaHashBD.aritmeticaModular(usuario.getLogin());
            if (newIndex < minIndex) {
                minIndex = newIndex;
            }
            if (newIndex > maxIndex) {
                maxIndex = newIndex;
            }
            // Agregar el usuario al índice correspondiente en el mapa
            indexMap.computeIfAbsent(newIndex, k -> new ArrayList<>()).add(usuario);
        }

        // Llenar la tabla con los usuarios
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < 100; i++) {
            List<Usuario> usuariosAtIndex = indexMap.getOrDefault(i, new ArrayList<>());
            for (Usuario usuario : usuariosAtIndex) {
                model.addRow(new Object[]{i, usuario.getNombreCompleto(), usuario.getLogin()});
            }
            if (usuariosAtIndex.isEmpty()) {
                model.addRow(new Object[]{i, "", ""}); // Agregar una fila vacía si no hay usuarios en este índice
            }
        }
    }//GEN-LAST:event_btnAritmeticoActionPerformed

    private void btnPlegamientoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlegamientoActionPerformed

        // Obtener la lista de usuarios
        List<Usuario> usuarios = tablaHashBD.obtenerUsuariosOrdenados("plegamiento");

        // Obtener el rango de índices permitidos
        int minIndex = Integer.MAX_VALUE;
        int maxIndex = Integer.MIN_VALUE;
        Map<Integer, List<Usuario>> indexMap = new HashMap<>();
        for (Usuario usuario : usuarios) {
            int newIndex = tablaHashBD.plegamiento(usuario.getLogin());
            if (newIndex < minIndex) {
                minIndex = newIndex;
            }
            if (newIndex > maxIndex) {
                maxIndex = newIndex;
            }
            // Agregar el usuario al índice correspondiente en el mapa
            indexMap.computeIfAbsent(newIndex, k -> new ArrayList<>()).add(usuario);
        }

        // Llenar la tabla con los usuarios
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < 100; i++) {
            List<Usuario> usuariosAtIndex = indexMap.getOrDefault(i, new ArrayList<>());
            for (Usuario usuario : usuariosAtIndex) {
                model.addRow(new Object[]{i, usuario.getNombreCompleto(), usuario.getLogin()});
            }
            if (usuariosAtIndex.isEmpty()) {
                model.addRow(new Object[]{i, "", ""}); // Agregar una fila vacía si no hay usuarios en este índice
            }
        }
    }//GEN-LAST:event_btnPlegamientoActionPerformed

    private void btnMitadCuadradoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMitadCuadradoActionPerformed

        // Obtener la lista de usuarios
        List<Usuario> usuarios = tablaHashBD.obtenerUsuariosOrdenados("mitadCuadrado");

        // Obtener el rango de índices permitidos
        int minIndex = Integer.MAX_VALUE;
        int maxIndex = Integer.MIN_VALUE;
        Map<Integer, List<Usuario>> indexMap = new HashMap<>();
        for (Usuario usuario : usuarios) {
            int newIndex = tablaHashBD.mitadCuadrado(usuario.getLogin());
            if (newIndex < minIndex) {
                minIndex = newIndex;
            }
            if (newIndex > maxIndex) {
                maxIndex = newIndex;
            }
            // Agregar el usuario al índice correspondiente en el mapa
            indexMap.computeIfAbsent(newIndex, k -> new ArrayList<>()).add(usuario);
        }

        // Llenar la tabla con los usuarios
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < 100; i++) {
            List<Usuario> usuariosAtIndex = indexMap.getOrDefault(i, new ArrayList<>());
            for (Usuario usuario : usuariosAtIndex) {
                model.addRow(new Object[]{i, usuario.getNombreCompleto(), usuario.getLogin()});
            }
            if (usuariosAtIndex.isEmpty()) {
                model.addRow(new Object[]{i, "", ""}); // Agregar una fila vacía si no hay usuarios en este índice
            }
        }
    }//GEN-LAST:event_btnMitadCuadradoActionPerformed

    private void btnMultiplicacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMultiplicacionActionPerformed

        // Obtener la lista de usuarios
        List<Usuario> usuarios = tablaHashBD.obtenerUsuariosOrdenados("multiplicacion");

        // Obtener el rango de índices permitidos
        int minIndex = Integer.MAX_VALUE;
        int maxIndex = Integer.MIN_VALUE;
        Map<Integer, List<Usuario>> indexMap = new HashMap<>();
        for (Usuario usuario : usuarios) {
            int newIndex = tablaHashBD.multiplicacion(usuario.getLogin());
            if (newIndex < minIndex) {
                minIndex = newIndex;
            }
            if (newIndex > maxIndex) {
                maxIndex = newIndex;
            }
            // Agregar el usuario al índice correspondiente en el mapa
            indexMap.computeIfAbsent(newIndex, k -> new ArrayList<>()).add(usuario);
        }

        // Llenar la tabla con los usuarios
        DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0);
        for (int i = 0; i < 100; i++) {
            List<Usuario> usuariosAtIndex = indexMap.getOrDefault(i, new ArrayList<>());
            for (Usuario usuario : usuariosAtIndex) {
                model.addRow(new Object[]{i, usuario.getNombreCompleto(), usuario.getLogin()});
            }
            if (usuariosAtIndex.isEmpty()) {
                model.addRow(new Object[]{i, "", ""}); // Agregar una fila vacía si no hay usuarios en este índice
            }
        }
    }//GEN-LAST:event_btnMultiplicacionActionPerformed

    private void limpiarTabla() {
    DefaultTableModel model = new DefaultTableModel(); // Crear un nuevo modelo de tabla vacío
    model.addColumn("ID");
    model.addColumn("Usuario");
    model.addColumn("Login");
    jTable2.setModel(model); // Establecer el nuevo modelo en la tabla
}
    
    private void btnLimpiarTablaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTablaActionPerformed
       DefaultTableModel model = (DefaultTableModel) jTable2.getModel();
        model.setRowCount(0); // Elimina todas las filas de la tabla

        

        
    }//GEN-LAST:event_btnLimpiarTablaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAritmetico;
    private javax.swing.JButton btnFuncionHash;
    private javax.swing.JButton btnInsertar;
    private javax.swing.JButton btnLimpiarTabla;
    private javax.swing.JButton btnMitadCuadrado;
    private javax.swing.JButton btnMultiplicacion;
    private javax.swing.JButton btnPlegamiento;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JTextField txtLogin;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtPassword;
    // End of variables declaration//GEN-END:variables
}
